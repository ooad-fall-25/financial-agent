import z from "zod";

import { protectedProcedure, createTRPCRouter } from "@/trpc/init";
import { TRPCError } from "@trpc/server";
import { 
  getMarketNews,
  getFinnhubCompanyNews
} from "@/lib/finnhub";

import { 
  getStockNews, 
  getPolygonCompanyNews
} from "@/lib/polygon";
import {
  createAINewsSummary,
  createAINewsSummaryByLink,
  translateSummary,
} from "@/lib/langchain";
import {
  getAllAlpacaNewsSummary,
  getAllFinnhubNewsSummary,
  getAllPolygonNewsSummary,
  getHeadlineFromAIResponse,
  getWebsiteHTMLText,
} from "@/lib/helper";
import { prisma } from "@/lib/db";
import dayjs from "dayjs";

export const marketsRouter = createTRPCRouter({
  getMarketNews: protectedProcedure
    .input(
      z.object({
        category: z.string(),
        minId: z.number().optional(),
      })
    )
    .query(async ({ input }) => {
      const { data: marketNews } = await getMarketNews(
        input.category,
        input.minId
      );

      if (!marketNews) {
        throw new TRPCError({ code: "NOT_FOUND", message: "News not found" });
      }
      return marketNews;
    }),

  getFinnhubCompanyNews: protectedProcedure
    .input(
      z.object({
        ticker: z.string(),
      })
    )
    .query(async ({ input }) => {
      const today = dayjs();
      const oneWeekAgo = today.subtract(7, 'day');

      const fromDate = oneWeekAgo.format('YYYY-MM-DD');
      const toDate = today.format('YYYY-MM-DD');

      const { data: companyNews } = await getFinnhubCompanyNews(
        input.ticker,
        fromDate,
        toDate
      );

      if (!companyNews || companyNews.length === 0) {
        throw new TRPCError({ code: "NOT_FOUND", message: "Company news not found for Finnhub" });
      }
      return companyNews;
    }),

  getPolygonStockNews: protectedProcedure.query(async () => {
    const stockNews = await getStockNews(50);
    const result = stockNews.results;
    return result;
  }),

  getPolygonCompanyNews: protectedProcedure
    .input(
      z.object({
        ticker: z.string(),
      })
    )
    .query(async ({ input }) => {
      const companyNews = await getPolygonCompanyNews(input.ticker, 50); 

      if (!companyNews || companyNews.results?.length === 0) {
        throw new TRPCError({ code: "NOT_FOUND", message: "Company news not found for Polygon" });
      }
      return companyNews.results;
  }),

  createAINewsSummary: protectedProcedure
    .input(
      z.object({
        language: z.string(),
        providerName: z.string(),
        category: z.string(),
      })
    )
    .mutation(async ({ input, ctx }) => {
      let accumulatedNews = "";
      if (input.providerName.toLocaleUpperCase() === "finnhub") {
        accumulatedNews = await getAllFinnhubNewsSummary(
          input.category.toLowerCase()
        );
      } else if (input.providerName.toLowerCase() === "polygon") {
        accumulatedNews = await getAllPolygonNewsSummary();
      } else if (input.providerName.toLowerCase() === "alpaca") { 
        accumulatedNews = await getAllAlpacaNewsSummary(); 
      } else {
        return; 
      }

      if (accumulatedNews.length == 0) {
        throw new TRPCError({ code: "NOT_FOUND", message: "No news found" });
      }

      const newsSummary = await createAINewsSummary(
        accumulatedNews,
        input.language,
        input.providerName,
        input.category,
      );

      if (!newsSummary) {
        throw new TRPCError({ code: "NOT_FOUND", message: "No summary found" });
      }

      // headline of category is generated by AI, with hidden md tag. it exists at the first line of the response and wont be rendered to the ui
      const headline = getHeadlineFromAIResponse(newsSummary.content.toString());

      const createdSummary = await prisma.newsSummary.create({
        data: {
          userId: ctx.auth.userId,
          aiRepsonse: newsSummary.content.toString(),
          provider: input.providerName,
          category: input.category,
          language: input.language,
          headline: headline,
          isByCategory: true,
          url: null,
        },
      });

      console.log(createdSummary);

      // manually insert id field, easy to query back from db. it was auto assigned by db, type number
      return { ...newsSummary, id: createdSummary.id };
    }),

  getAINewsSummary: protectedProcedure.query(async ({ ctx }) => {
    const newsSummary = prisma.newsSummary.findFirst({
      where: {
        userId: ctx.auth.userId,
        url: null,
      },
      orderBy: {
        createdAt: "desc",
      },
    });

    if (!newsSummary) {
      throw new TRPCError({ code: "NOT_FOUND", message: "Summary not found" });
    }

    return newsSummary;
  }),

  createAINewsSummaryByLink: protectedProcedure
    .input(
      z.object({
        url: z.string(),
        title: z.string(),
        language: z.string(),
        providerName: z.string(),
        category: z.string(),
      })
    )
    .mutation(async ({ input, ctx }) => {
      if (input.url.length == 0) {
        throw new TRPCError({
          code: "NOT_FOUND",
          message: "No link found",
        });
      }
      const article = await getWebsiteHTMLText(input.url);

      if (article.length == 0) {
        throw new TRPCError({
          code: "NOT_FOUND",
          message: "No news article found",
        });
      }

      const summaryByLink = await createAINewsSummaryByLink(
        article,
        input.language,
        input.providerName,
        input.category,
        input.title,
        input.url,
      );

      if (!summaryByLink) {
        throw new TRPCError({ code: "NOT_FOUND", message: "No summary found" });
      }

      const createdNewsSummaryByLink = await prisma.newsSummary.create({
        data: {
          userId: ctx.auth.userId,
          aiRepsonse: summaryByLink.content.toString(),
          provider: input.providerName,
          category: input.category,
          language: input.language,
          url: input.url,
          headline: input.title,
        },
      });

      console.log(summaryByLink.content.toString());

      return createdNewsSummaryByLink;
    }),

  getAINewsSummaryByLink: protectedProcedure.query(async ({ ctx }) => {
    const summary = await prisma.newsSummary.findFirst({
      where: {
        userId: ctx.auth.userId,
        url: {
          not: null,
        },
      },
      orderBy: {
        createdAt: "desc",
      },
    });
    return summary;
  }),
});