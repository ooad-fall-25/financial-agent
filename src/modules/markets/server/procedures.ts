import z from "zod";

import { protectedProcedure, createTRPCRouter } from "@/trpc/init";
import { TRPCError } from "@trpc/server";

import {
  createAINewsSummary,
  createAINewsSummaryByLink,
} from "@/lib/langchain";
import {
  getAccumulatedNews,
  getHeadlineFromAIResponse,
  getWebsiteHTMLText,
} from "@/lib/helper";
import { prisma } from "@/lib/db";
import {
  getChineseNews,
  getUSCompanyNews,
  getUSMarketNews,
  MarketNews,
} from "@/lib/news-summary";

export const marketsRouter = createTRPCRouter({
  createAINewsSummary: protectedProcedure
    .input(
      z.object({
        language: z.string(),
        marketType: z.string(),
        category: z.string(),
      })
    )
    .mutation(async ({ input, ctx }) => {
      const accumulatedNews = await getAccumulatedNews(input.marketType, input.category, 0);

      if (accumulatedNews.length == 0) {
        throw new TRPCError({ code: "NOT_FOUND", message: "No news found" });
      }

      const newsSummary = await createAINewsSummary(
        accumulatedNews,
        input.language,
        input.marketType,
        input.category
      );

      if (!newsSummary) {
        throw new TRPCError({ code: "NOT_FOUND", message: "No summary found" });
      }

      // headline of category is generated by AI, with hidden md tag. it exists at the first line of the response and wont be rendered to the ui
      const headline = getHeadlineFromAIResponse(
        newsSummary.content.toString()
      );

      const createdSummary = await prisma.newsSummary.create({
        data: {
          userId: ctx.auth.userId,
          aiRepsonse: newsSummary.content.toString(),
          provider: input.marketType,
          category: input.category,
          language: input.language,
          headline: headline,
          isByCategory: true,
          url: null,
        },
      });

      console.log(createdSummary);

      // manually insert id field, easy to query back from db. it was auto assigned by db, type number
      return { ...newsSummary, id: createdSummary.id };
    }),

  getAINewsSummary: protectedProcedure.query(async ({ ctx }) => {
    const newsSummary = prisma.newsSummary.findFirst({
      where: {
        userId: ctx.auth.userId,
        url: null,
      },
      orderBy: {
        createdAt: "desc",
      },
    });

    if (!newsSummary) {
      throw new TRPCError({ code: "NOT_FOUND", message: "Summary not found" });
    }

    return newsSummary;
  }),

  createAINewsSummaryByLink: protectedProcedure
    .input(
      z.object({
        url: z.string(),
        title: z.string(),
        language: z.string(),
        providerName: z.string(),
        category: z.string(),
      })
    )
    .mutation(async ({ input, ctx }) => {
      if (input.url.length == 0) {
        throw new TRPCError({
          code: "NOT_FOUND",
          message: "No link found",
        });
      }
      const article = await getWebsiteHTMLText(input.url);

      if (article.length == 0) {
        throw new TRPCError({
          code: "NOT_FOUND",
          message: "No news article found",
        });
      }

      const summaryByLink = await createAINewsSummaryByLink(
        article,
        input.language,
        input.providerName,
        input.category,
        input.title,
        input.url
      );

      if (!summaryByLink) {
        throw new TRPCError({ code: "NOT_FOUND", message: "No summary found" });
      }

      const createdNewsSummaryByLink = await prisma.newsSummary.create({
        data: {
          userId: ctx.auth.userId,
          aiRepsonse: summaryByLink.content.toString(),
          provider: input.providerName,
          category: input.category,
          language: input.language,
          url: input.url,
          headline: input.title,
        },
      });

      console.log(summaryByLink.content.toString());

      return createdNewsSummaryByLink;
    }),

  getAINewsSummaryByLink: protectedProcedure.query(async ({ ctx }) => {
    const summary = await prisma.newsSummary.findFirst({
      where: {
        userId: ctx.auth.userId,
        url: {
          not: null,
        },
      },
      orderBy: {
        createdAt: "desc",
      },
    });
    return summary;
  }),

  getMarketNews: protectedProcedure // TODO: rename
    .input(
      z.object({
        category: z.string(),
        marketType: z.string(),
      })
    )
    .query(async ({ input }) => {
      let marketNews = [] as MarketNews[];
      if (input.marketType === "cn") {
        marketNews = await getChineseNews(input.category);
      } else {
        marketNews = await getUSMarketNews(input.category);
      }
      if (!marketNews) {
        throw new TRPCError({ code: "NOT_FOUND", message: "No news found!" });
      }

      return marketNews;
    }),

  getUSCompanyNews: protectedProcedure
    .input(
      z.object({
        ticker: z.string(),
      })
    )
    .query(async ({ input }) => {
      const news = await getUSCompanyNews(input.ticker);
      if (!news) {
        throw new TRPCError({ code: "NOT_FOUND", message: "No news found!" });
      }

      return news;
    }),
});
